---
layout: single
title: 'SQL 기초'
author_profile: true
date: 2023-10-04 18:28:53 +0900
categories: sql
published: true
toc: true
toc_label: 'Table of Contents'
toc_icon: 'list-ul'
toc_sticky: true
sidebar:
  nav: 'docs'
# sidebar:
#   - title: 'Title'
#     image: http://placehold.it/350x250
#     image_alt: 'image'
#     text: 'Some text here.'
#   - title: 'Another Title'
#     text: 'More text here.'
---

<br/>

SQL: **S**tructured **Q**uery **L**anguage

## 0. DB와 SQL을 사용하는 이유

- 많은 양의 data를 효과적으로 저장/수정/사용하기 위해 DB를 사용한다.

- SQL은 query문을 통해 data를 읽어오는 과정을 쉽게 만들어주고, data를 정리/분석하는 기능을 제공한다.

<br/>
<br/>

## 1. SELECT, WHERE

DB에서 data를 읽어오기

### SELECT ... FROM ... ;

```sql
-- DB에 있는 table 보기
SHOW tables;

-- table에서 특정 field 가져오기
SELECT column_name FROM table_name;

-- data에 조건 주기
SELECT * FROM table_name
WHERE conditions;
```

<br/>

### **WHERE** - query에 조건 추가

```sql
-- AND, OR
SELECT * FROM users
WHERE name LIKE '김%' AND age > 20;

-- =, !=
SELECT * FROM users
WHERE title != 'target title';

-- BETWEEN ... AND ...
SELECT * FROM messages
WHERE created_at BETWEEN "2023-10-05" AND "2023-10-07"; -- 5일부터 6일까지의 data

-- IN 포함
SELECT * FROM courses
WHERE week IN (1, 4, 5); -- week이 1, 4, 5인 data

-- LIKE 패턴
SELECT * FROM users
WHERE email LIKE '%@gmail.com'; -- @gmail.com으로 끝나는 data
```

<br/>

### **LIMIT** - 일부 data만 가져오기

```sql
SELECT * FROM users
LIMIT 10; -- 10개만
```

<br/>

### **DISTINCT** - 중복 제거

```sql
SELECT DISTINCT column_names FROM users;

-- users table에서 나라이름 중복제거 후 가져오기
SELECT DISTINCT country FROM users;

-- 나라이름 + 도시이름 중복제거 후 가져오기
SELECT DISTINCT country, city FROM users;

```

<br/>

### **COUNT** - data 개수, NULL은 세지 않음

```sql
-- user data의 수
SELECT COUNT(*) FROM users;

-- 한국 국적인 user data의 수
SELECT COUNT(*) FROM users
WHERE country = 'korea';

-- country의 수
SELECT COUNT(DISTINCT country) FROM users;
```

<br/>
<br/>

## 2. GROUP BY, ORDER BY

특정 범주로 data를 묶거나, 정렬해서 더 의미있는 data를 추출할 수 있다.

### **GROUP BY**

```sql
-- COUNT(*)에는 column_name(filed)으로 묶인 data의 개수가 들어간다.
SELECT column_name, COUNT(*) FROM table_name
GROUP BY column_name;

SELECT name, COUNT(*) FROM users
GROUP BY name;

-- GROUP BY에 여러 개의  field를 사용할 수도 있다.
SELECT name, country, COUNT(*) FROM users
GROUP BY name, country;
```

<br/>

### **GROUP BY**로 field의 통계값 얻기

- MIN(), MAX()
- AVG(), SUM(), DIV()
- ROUND(), FLOOR(), CEIL(), ...

```sql
SELECT week, MIN(likes), MAX(likes), AVG(likes), ROUND(AVG(likes), 2), FLOOR(AVG(likes)), SUM(likes) FROM checkins
GROUP BY week;
```

<br/>

### **ORDER BY**

```sql
SELECT column_name1, COUNT(*) FROM table_name
GROUP BY column_name1
ORDER BY column_name2 DESC/ASC; -- default ASC

SELECT name, COUNT(*) FROM users
GROUP BY name
ORDER BY COUNT(*) DESC;

-- ORDER BY에 여러 개의  field를 사용할 수도 있다.
SELECT name, country, COUNT(*) FROM users
GROUP BY name, country
ORDER BY name DESC, country ASC
```

<br/>
<br/>

## 3. AS (Alias)

Table이나 Column의 이름에 alias 붙일 떄 사용한다.
`table_name.column_name` 으로 특정 table을 명시할 때, 간단하게 alias를 사용해서 `table_alias.column_name`으로 나타낼 수 있다.

```sql
SELECT city, COUNT(*) AS cnt FROM users AS u
WHERE u.country = 'korea'
GROUP BY city;

-- AS 없이도 가능
SELECT city, COUNT(*) cnt FROM users u
WHERE u.country = 'korea'
GROUP BY city;
```

----- 결과 -----

| city  | cnt |
| :---: | :-: |
| Seoul | 80  |
| Busan | 40  |
|  ...  | ... |

alias로 설정한 cnt로 column field name이 출력된 것을 확인 가능하다.

<br/>
<br/>

## 4. JOIN

DB에 data를 저장할 떄 table 하나에 모든 data를 저장하는 것이 아니라, data의 특징별로 table을 나눠서 data를 저장한다.
필요한 경우 여러 table을 공통된 key를 기준으로 연결할 수 있다.

### **LEFT JOIN**

두 table의 합집합

```sql
SELECT * FROM table_a AS a
LEFT JOIN table_b AS b
ON a.key = b.key
```

<center>
<img src="https://github.com/hjunyoung/hjunyoung.github.io/assets/50318500/c242a1c5-872e-47ff-93e0-54518dcde0ea" alt="JOIN query" width=400/>
</center>

`FROM` 다음에 나오는 table을 `table_a`, JOIN query에 나오는 table을 `table_b`라고 하면

왼쪽 table(예시에서 table_a)에 있는 data들에 오른쪽 table(예시에서 table_b)의 data를 합친다.(즉, table_a의 data는 모두 포함)

동일한 key값을 갖는 data가 table_b에 없는 경우 `Null` 값이 저장된다.

Table에서 특정 field의 값이 `Null`인(없는) data를 읽어올 수 있다.

```sql
-- 학교를 다니지 않는 유저 data
SELECT * FROM users AS u
LEFT JOIN school_users AS s
ON u.user_id = s.user_id
WHERE s.school IS NULL -- IS NOT NULL: 학교를 다니는 유저 data
```

<br/>

### **RIGHT JOIN**

두 table의 합집합

```sql
SELECT * FROM table_a AS a
RIGHT JOIN table_b AS b
ON a.key = b.key
```

LEFT JOIN과 반대로 오른쪽 table(table_b)에 있는 data들에 왼쪽 table(table_a)의 data를 합친다.(즉, table_b의 data는 모두 포함)

동일한 key값을 갖는 data가 table_a에 없는 경우 `Null` 값이 출력된다.

<br/>

### **INNER JOIN**

두 table의 교집합

```sql
SELECT * FROM table_a AS a
INNER JOIN table_b AS b
ON a.key = b.key
```

두 table에서 공통된 key 값이 존재하는 data들만 모아준다.

<br/>

### **UNION**

여러 개의 SELECT query를 한번에 모아서 출력하는 경우 사용

> 주의) 이 때, 두 SELECT 결과의 field name(column name)이 같아야 한다.

```sql
(
  SELECT 'dummy_value1' AS dummy_column_name, field_a, field_b, field_c from table
  ...;
)
UNION ALL
(
  SELECT 'dummy_value2' AS dummy_column_name, field_a, field_c, field_c from table
  ...;
)
```

| dummy_column_name | field_a | field_b | field_c |
| :---------------: | :-----: | :-----: | :-----: |
|  'dummy_value1'   |   ...   |   ...   |   ...   |
|                   |   ...   |
|  'dummy_value1'   |   ...   |   ...   |   ...   |
|  'dummy_value2'   |   ...   |   ...   |   ...   |
|                   |   ...   |
|  'dummy_value2'   |   ...   |   ...   |   ...   |
|                   |   ...   |

<br/>
`UNION ALL`을 사용하면 `ORDER BY`로 한 정렬이 무시된다.
SubQuery를 이용해서 정렬 문제 해결 가능하다.

<br/>
<br/>

**참고) DUMMY column**

```sql
SELECT 'dummy_value' AS column_name FROM table;

SELECT 'July' AS month, user_id ,name FROM messages;
```

<!--

## Subquery, etc... -->
